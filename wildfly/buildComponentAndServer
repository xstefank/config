#!/bin/bash

# Created by argbash-init v2.6.0a
# Rearrange the order of options below according to what you would like to see in the help message.
# ARG_POSITIONAL_SINGLE([component-dir],[component directory])
# ARG_POSITIONAL_SINGLE([server-dir],[server directory])
# ARG_DEFAULTS_POS([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.0a one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_component_dir=
_arg_server_dir=

print_help ()
{
	printf 'Usage: %s <component-dir> <server-dir>\n' "$0"
	printf '\t%s\n' "<component-dir>: component directory"
	printf '\t%s\n' "<server-dir>: server directory"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_positionals+=("$1")
		shift
	done
}


handle_passed_args_count ()
{
	_required_args_string="'component-dir' and 'server-dir'"
	test ${#_positionals[@]} -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
	test ${#_positionals[@]} -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
	_positional_names=('_arg_component_dir' '_arg_server_dir' )

	for (( ii = 0; ii < ${#_positionals[@]}; ii++))
	do
		eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

cd $_arg_component_dir
echo "building $PWD..."

mvn clean install -DskipTests -Dcheckstyle.skip -Dmaven.javadoc.skip -Denforcer.skip

if [ $? -eq 0 ]; then
    echo "$_arg_component_dir build successful"
else
    echo "$_arg_component_dir build failed"
    exit
fi

cd $_arg_server_dir
echo "building $PWD..."

mvn clean install -DskipTests -Dcheckstyle.skip -Dmaven.javadoc.skip -Denforcer.skip

if [ $? -eq 0 ]; then
    echo "server build successful"
else
    echo "server build failed"
    exit
fi


# ] <-- needed because of Argbash
