#!/bin/bash

function getRunningSinkOrDefault {
	if `pactl list short | grep RUNNING` ; then
		echo `pactl list short | grep RUNNING | cut -f2`
	else
		echo `pacmd stat | grep "Default sink name" | awk 'NF>1{print $NF}'`
	fi
}

SINK=$(getRunningSinkOrDefault)
SINKNAME=$SINK

function getVol {
	echo `pactl list sinks | grep '^[[:space:]]Volume:' | \
    head -n 1 | sed -e 's,.* \([0-9][0-9]*\)%.*,\1,'`
}

function notifyVol {
	currentVol=$(getVol)
    notify-send -u low "Sink \"$SINKNAME\" volume :: $currentVol%"
}

function isMuted {
	echo `pactl list sinks | grep 'Mute' | head -n $(( 1 + 1 )) | tail -n 1 | sed 's/.* //g'`
}

function notifyMuted {
	IS_MUTED=$(isMuted)
	MESSAGE="Sink \"$SINKNAME\""
	if [[ $IS_MUTED == "yes" ]]; then MESSAGE="$MESSAGE muted"; else MESSAGE="$MESSAGE unmuted"; fi
	echo $MESSAGE
	notify-send -u low "$MESSAGE"
}

function notifyMicMuted {
	STATUS=`amixer get Capture | grep "Front Left: Capture" | awk '{print $NF}'`
	notify-send -u low "Microphone $STATUS"
}

case "$1" in
	plus)
		pactl set-sink-volume $SINK +5% # increase sound volume
		notifyVol
		;;
	minus)
		pactl set-sink-volume $SINK -5% # increase sound volume
		notifyVol
		;;
	toggle)
		pactl set-sink-mute $SINK toggle
		notifyMuted
		;;
	ensureMute)
		IS_MUTED=$(isMuted)
		if [[ $IS_MUTED == "no" ]]; then pactl set-sink-mute $SINK toggle; fi
		;; 
	micMute)
		amixer set Capture toggle
		notifyMicMuted
		;;
	*)
		echo "Invalid argument: $1"
		exit 1
esac



