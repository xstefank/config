#!/bin/bash

# Created by argbash-init v2.7.1
# Rearrange the order of options below according to what you would like to see in the help message.
# ARG_OPTIONAL_SINGLE([groupId],[g],[groupId of the generated project],[io.xstefank])
# ARG_OPTIONAL_SINGLE([version],[v],[version of the generated project],[999-SNAPSHOT])
# ARG_POSITIONAL_SINGLE([artifactId],[artifactId of the generated project])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.7.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='gvh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_artifactid=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_groupid="io.xstefank"
_arg_version="999-SNAPSHOT"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [-g|--groupId <arg>] [-v|--version <arg>] [-h|--help] <artifactId>\n' "$0"
	printf '\t%s\n' "<artifactId>: artifactId of the generated project"
	printf '\t%s\n' "-g, --groupId: groupId of the generated project (default: 'io.xstefank')"
	printf '\t%s\n' "-v, --version: version of the generated project (default: '999-SNAPSHOT')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-g|--groupId)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_groupid="$2"
				shift
				;;
			--groupId=*)
				_arg_groupid="${_key##--groupId=}"
				;;
			-g*)
				_arg_groupid="${_key##-g}"
				;;
			-v|--version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_version="$2"
				shift
				;;
			--version=*)
				_arg_version="${_key##--version=}"
				;;
			-v*)
				_arg_version="${_key##-v}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'artifactId'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_artifactid "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


mvn archetype:generate --batch-mode -DarchetypeGroupId=io.xstefank -DarchetypeArtifactId=jakarta10 -DgroupId=$_arg_groupid -DartifactId=$_arg_artifactid -Dversion=$_arg_version


# ] <-- needed because of Argbash
