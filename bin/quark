#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([groupId],[g],[gropuId of the generated project],[io.xstefank])
# ARG_OPTIONAL_SINGLE([version],[v],[version of the generated project],[999-SNAPSHOT])
# ARG_OPTIONAL_BOOLEAN([offline],[o],[work offline],[off])
# ARG_POSITIONAL_SINGLE([artifactId],[artifactId of the generated project])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='gvoh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_artifactid=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_groupid="io.xstefank"
_arg_version="999-SNAPSHOT"
_arg_offline="off"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [-g|--groupId <arg>] [-v|--version <arg>] [-o|--(no-)offline] [-h|--help] <artifactId>\n' "$0"
	printf '\t%s\n' "<artifactId>: artifactId of the generated project"
	printf '\t%s\n' "-g, --groupId: gropuId of the generated project (default: 'io.xstefank')"
	printf '\t%s\n' "-v, --version: version of the generated project (default: '999-SNAPSHOT')"
	printf '\t%s\n' "-o, --offline, --no-offline: work offline (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-g|--groupId)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_groupid="$2"
				shift
				;;
			--groupId=*)
				_arg_groupid="${_key##--groupId=}"
				;;
			-g*)
				_arg_groupid="${_key##-g}"
				;;
			-v|--version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_version="$2"
				shift
				;;
			--version=*)
				_arg_version="${_key##--version=}"
				;;
			-v*)
				_arg_version="${_key##-v}"
				;;
			-o|--no-offline|--offline)
				_arg_offline="on"
				test "${1:0:5}" = "--no-" && _arg_offline="off"
				;;
			-o*)
				_arg_offline="on"
				_next="${_key##-o}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-o" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'artifactId'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_artifactid "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv

QUARKUS_VERSION=2.8.1.Final

if [ "$_arg_offline" == "on" ]; then
  ADDITIONAL_PARAMS="$ADDITIONAL_PARAMS -DquarkusRegistryClient=false"
fi

mvn io.quarkus:quarkus-maven-plugin:$QUARKUS_VERSION:create \
    -DprojectGroupId=$_arg_groupid \
    -DprojectArtifactId=$_arg_artifactid \
    -DprojectVersion=$_arg_version \
    -DclassName="io.xstefank.PingResource" \
    $ADDITIONAL_PARAMS \
    -Dpath="/ping"
#    -Dquarkus.platform.artifact-id=quarkus-bom \
#    -Dquarkus.platform.version=$QUARKUS_VERSION \
#    -Dquarkus-plugin.version=$QUARKUS_VERSION


# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
