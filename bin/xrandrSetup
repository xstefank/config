#!/bin/bash

# Rearrange the order of options below according to what you would like to see in the help message.
# ARG_OPTIONAL_BOOLEAN([hdmi],[h],[Specifies that the internal HDMI port should be used for external output],[off])
# ARG_OPTIONAL_BOOLEAN([dock],[d],[Specifies that the external dock ports should be used for external output],[off])
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.7.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='hdh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_hdmi="off"
_arg_dock="off"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [-h|--(no-)hdmi] [-d|--(no-)dock] [-h|--help]\n' "$0"
	printf '\t%s\n' "-h, --hdmi, --no-hdmi: Specifies that the internal HDMI port should be used for external output (off by default)"
	printf '\t%s\n' "-d, --dock, --no-dock: Specifies that the external dock ports should be used for external output (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--no-hdmi|--hdmi)
				_arg_hdmi="on"
				test "${1:0:5}" = "--no-" && _arg_hdmi="off"
				;;
			-h*)
				_arg_hdmi="on"
				_next="${_key##-h}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-h" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-d|--no-dock|--dock)
				_arg_dock="on"
				test "${1:0:5}" = "--no-" && _arg_dock="off"
				;;
			-d*)
				_arg_dock="on"
				_next="${_key##-d}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


xrandr -s 0
xrandr --output eDP-1-1 --auto --primary

if [ $_arg_hdmi = "on" ]; then
	#set HDMI output (HDMI-1) left of main monitor (eDP-1-1)
	xrandr --output DP-1 --right-of eDP-1-1 --auto
	exit 0
fi

if [ $_arg_dock = "on" ]; then
  xrandr --output DP-3.2 --right-of eDP-1-1 --auto
  xrandr --output DP-3.1 --right-of DP-3.2 --auto
  xrandr --output DP-1 --right-of DP-3.1 --auto
	exit 0
fi

# ] <-- needed because of Argbash
