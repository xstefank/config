#!/bin/bash

# Created by argbash-init v2.6.0a
# Rearrange the order of options below according to what you would like to see in the help message.
# ARG_OPTIONAL_SINGLE([clean-dir],[d],[directory to be cleaned],[$PWD])
# ARG_POSITIONAL_SINGLE([server-dir],[directory containing the server template])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.0a one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='dh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_server_dir=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_clean_dir="$PWD"

print_help ()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [-d|--clean-dir <arg>] [-h|--help] <server-dir>\n' "$0"
	printf '\t%s\n' "<server-dir>: directory containing the server template"
	printf '\t%s\n' "-d,--clean-dir: directory to be cleaned (default: '$PWD')"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-d|--clean-dir)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_clean_dir="$2"
				shift
				;;
			--clean-dir=*)
				_arg_clean_dir="${_key##--clean-dir=}"
				;;
			-d*)
				_arg_clean_dir="${_key##-d}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_positionals+=("$1")
				;;
		esac
		shift
	done
}


handle_passed_args_count ()
{
	_required_args_string="'server-dir'"
	test ${#_positionals[@]} -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
	test ${#_positionals[@]} -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
	_positional_names=('_arg_server_dir' )

	for (( ii = 0; ii < ${#_positionals[@]}; ii++))
	do
		eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

workdir=${_arg_clean_dir:-$PWD}
eval workdir=$workdir

if [[ $workdir -ef ~ ]]; then
    echo "I won't delete your home directory! Do it yourself if you wish."
    exit 1
fi

echo "Cleaning $workdir with server instance $_arg_server_dir"

rm -rf $workdir/*
cp $_arg_server_dir/* $workdir -r
cd $workdir

echo "finished..."
 

# ] <-- needed because of Argbash
